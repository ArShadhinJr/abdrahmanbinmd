// eslint-disable-next-line no-unused-vars
import React, { useState, useEffect } from 'react';
// import css 
import './Moddal.css';

const Modal = () => {
  const [isModalOpen, setIsModalOpen] = useState(true);

  useEffect(() => {
    // Add the 'overflow-hidden' class to the body when the modal is open
    if (isModalOpen) {
      document.body.classList.add('overflow-hidden');
    } else {
      // Remove the 'overflow-hidden' class when the modal is closed
      document.body.classList.remove('overflow-hidden');
    }

    // Cleanup effect when component unmounts
    return () => {
      document.body.classList.remove('overflow-hidden');
    };
  }, [isModalOpen]);

  const closeModal = () => {
    setIsModalOpen(false);
  };

  // Example: Completed and Upcoming Features
  const completedFeatures = [
    '‚úÖ ‡¶∏‡¶ï‡¶≤ ‡¶∏‡ßá‡¶ï‡¶∂‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§',
    '‚úÖ ‡¶∞‡¶ø‡¶ú‡¶ø‡¶â‡¶Æ‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡•§',
  ];

  const upcomingFeatures = [
    'üîú ‡¶∏‡¶ï‡¶≤ ‡¶°‡¶æ‡¶Æ‡¶ø ‡¶á‡¶Æ‡ßá‡¶ú ‡¶¨‡¶æ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡ßú‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§',
    'üîú ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ü‡¶æ ‡¶∞‡ßá‡¶∏‡ßç‡¶™‡¶®‡ßç‡¶∏‡¶ø‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶∏‡¶ï‡¶≤ ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∞‡ßá‡¶∏‡ßç‡¶™‡¶®‡ßç‡¶∏‡¶ø‡¶≠ ‡¶∂‡ßá‡¶∑ ‡¶π‡¶¨‡ßá‡•§',
    'üîú gsap ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶∞‡ßã ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶ø‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§',
  ];

  return (
    <>
      {isModalOpen && (
        <div  className="fixed font top-0 left-0 w-full h-full flex items-center justify-center bg-gray-800 bg-opacity-50 z-50">
          <div className="bg-white p-8 rounded-lg shadow-md">
            <p className="text-2xl font-bold mb-4 text-red-500">‡¶Ü‡¶®‡ßç‡¶§‡¶∞‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§!</p>
            <p className="text-xl text-gray-800">
              ‡¶Ü‡¶∏‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ‡•§ ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü‡ßá‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶ö‡¶≤‡¶Æ‡¶æ‡¶® ‡¶∞‡ßü‡ßá‡¶õ‡ßá‡•§
            </p>
                      <p className="text-lg text-gray-700">‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ‡ßü ‡¶°‡ßá‡¶Æ‡ßã ‡¶á‡¶Æ‡ßá‡¶ú ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ </p>
                      <p className='text-center p-4 my-3 bg-primary border text-white'>‡¶ì‡ßü‡ßá‡¶¨ ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶∞‡¶á‡¶≤</p>

            {/* Completed Features Section */}
            <div className="mt-4">
              <h3 className="text-lg font-bold">‡¶ï‡¶æ‡¶ú ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü‡ßá‡¶õ‡ßá:</h3>
              <ul className="flex flex-col gap-0">
                {completedFeatures.map((feature, index) => (
                  <li key={index} className="text-gray-700 py-0 my-0 ms-4">{feature}</li>
                ))}
              </ul>
            </div>

            {/* Upcoming Features Section */}
            <div>
              <h3 className="text-lg font-bold mt-4">‡¶ï‡¶æ‡¶ú ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü‡¶®‡¶ø:</h3>
              <ul className=" flex flex-col gap-0">
                {upcomingFeatures.map((feature, index) => (
                  <li key={index} className="text-gray-700 py-0 my-0 ms-4">{feature}</li>
                ))}
              </ul>
            </div>

            <button
              className="mt-4 bg-green-500 w-full text-white px-4 py-2 rounded hover:bg-green-700"
              onClick={closeModal}
            >
              ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá, ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶
            </button>
          </div>
        </div>
      )}
    </>
  );
};

export default Modal;
